// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Onboarding Renders correctly 1`] = `
<RNCSafeAreaView
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#000000",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    data={
      Array [
        <React.Fragment>
          <Text
            testID="bodyText"
          >
            Hello
          </Text>
        </React.Fragment>,
        <React.Fragment>
          <Text
            testID="bodyText"
          >
            World
          </Text>
        </React.Fragment>,
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={true}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    onViewableItemsChanged={[Function]}
    pagingEnabled={true}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={16}
    showsHorizontalScrollIndicator={false}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "width": 750,
        },
      ]
    }
    viewabilityConfig={
      Object {
        "viewAreaCoveragePercentThreshold": 60,
      }
    }
    viewabilityConfigCallbackPairs={
      Array [
        Object {
          "onViewableItemsChanged": [Function],
          "viewabilityConfig": Object {
            "viewAreaCoveragePercentThreshold": 60,
          },
        },
      ]
    }
  >
    <View>
      <View
        onLayout={[Function]}
        style={
          Array [
            Object {
              "flexDirection": "row",
            },
            null,
          ]
        }
      >
        <View
          style={
            Array [
              Object {
                "width": 750,
              },
              Object {
                "backgroundColor": "#000000",
                "flexDirection": "column",
              },
            ]
          }
        >
          <Text
            testID="bodyText"
          >
            Hello
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Array [
            Object {
              "flexDirection": "row",
            },
            null,
          ]
        }
      >
        <View
          style={
            Array [
              Object {
                "width": 750,
              },
              Object {
                "backgroundColor": "#000000",
                "flexDirection": "column",
              },
            ]
          }
        >
          <Text
            testID="bodyText"
          >
            World
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "flexShrink": 2,
      }
    }
  >
    <View
      accessibilityLabel="Previous"
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
      testID="previousButton"
    >
      <Text
        style={
          Array [
            Object {
              "color": "#35823F",
              "fontSize": 18,
              "fontWeight": "bold",
            },
            Object {
              "color": "transparent",
              "paddingRight": 20,
            },
          ]
        }
      />
    </View>
    <View
      style={
        Array [
          Object {
            "alignSelf": "center",
            "bottom": 20,
            "flexDirection": "row",
            "position": "absolute",
          },
          Object {
            "position": "relative",
            "top": 0,
          },
        ]
      }
    >
      <View
        collapsable={false}
        nativeID="animatedComponent"
        style={
          Object {
            "backgroundColor": "rgba(53, 130, 63, 1)",
            "borderColor": "#35823F",
            "borderRadius": 5,
            "borderStyle": "solid",
            "borderWidth": 1,
            "height": 10,
            "marginHorizontal": 5,
            "opacity": 1,
            "transform": Array [
              Object {
                "scale": 1,
              },
            ],
            "width": 10,
          }
        }
      />
      <View
        collapsable={false}
        nativeID="animatedComponent"
        style={
          Object {
            "backgroundColor": "rgba(0, 0, 0, 0)",
            "borderColor": "#35823F",
            "borderRadius": 5,
            "borderStyle": "solid",
            "borderWidth": 1,
            "height": 10,
            "marginHorizontal": 5,
            "opacity": 1,
            "transform": Array [
              Object {
                "scale": 1,
              },
            ],
            "width": 10,
          }
        }
      />
    </View>
    <View
      accessibilityLabel="Next"
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
      testID="nextButton"
    >
      <Text
        style={
          Array [
            Object {
              "color": "#35823F",
              "fontSize": 18,
              "fontWeight": "bold",
            },
            Object {
              "color": "#35823F",
              "paddingLeft": 20,
            },
          ]
        }
      />
    </View>
  </View>
</RNCSafeAreaView>
`;
